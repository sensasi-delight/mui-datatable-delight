import type { RefObject } from 'react'
import type { DataTableState } from '@src/types/state'
import computeDisplayRow from './compute-display-row'
import type { DataTableOptions } from '@src/types/options'
import type { HandleUpdateCellValue } from '@src/hooks/use-data-table-context/components/provider/types/handle-update-cell-value'

/**
 * ⚠️ This JSDoc is generated by AI ⚠️
 * -
 *
 * Generates the display data for the data table based on the provided columns,
 * data, filters, and search text. This function processes each row of data,
 * applying any filters and search logic, and returns the rows that should be
 * displayed.
 *
 * @param columns - The columns of the data table.
 * @param data - The raw data of the data table.
 * @param filterList - The list of active filters applied to the data.
 * @param searchText - The text used to search the data.
 * @param props - The properties of the data table.
 * @param state - The current state of the data table.
 * @param options - Configuration options for the data table.
 * @param updateCellValueRef - A function to update the state of the data table.
 * @returns An array of rows to be displayed, each containing the processed data and its index.
 */
export default function getDisplayData<T>(
    columns: DataTableState<T>['columns'],
    data: DataTableState<T>['data'],
    filterList: DataTableState<T>['filterList'],
    searchText: DataTableState<T>['searchText'],
    state: DataTableState<T>,
    options: DataTableOptions<T>,
    updateCellValueRef: RefObject<HandleUpdateCellValue | undefined>
): DataTableState<T>['displayData'] {
    const newRows: DataTableState<T>['displayData'] = []

    data.forEach((row, index) => {
        const displayRow = computeDisplayRow(
            columns,
            row.data,
            index,
            filterList,
            searchText,
            options,
            state,
            updateCellValueRef
        )

        if (displayRow) {
            newRows.push({
                data: displayRow,
                dataIndex: row.index
            })
        }
    })

    return newRows
}
