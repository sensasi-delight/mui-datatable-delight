import type {
    DataTableOptions,
    DataTableProps,
    DataTableState
} from '@src/index'
import computeDisplayRow from './compute-display-row'
import type DataTableMeta from '@src/types/table-meta'

/**
 * ⚠️ This JSDoc is generated by AI ⚠️
 * -
 *
 * Generates the display data for the data table based on the provided columns,
 * data, filters, and search text. This function processes each row of data,
 * applying any filters and search logic, and returns the rows that should be
 * displayed.
 *
 * @param columns - The columns of the data table.
 * @param data - The raw data of the data table.
 * @param filterList - The list of active filters applied to the data.
 * @param searchText - The text used to search the data.
 * @param tableMeta - Metadata about the table, including current table data.
 * @param props - The properties of the data table.
 * @param state - The current state of the data table.
 * @param options - Configuration options for the data table.
 * @param setState - A function to update the state of the data table.
 * @returns An array of rows to be displayed, each containing the processed data and its index.
 */
export default function getDisplayData(
    columns: DataTableState['columns'],
    data: DataTableState['data'],
    filterList: DataTableState['filterList'],
    searchText: DataTableState['searchText'],
    tableMeta: DataTableMeta | undefined,
    props: DataTableProps,
    state: DataTableState,
    options: DataTableOptions,
    setState: (newState: DataTableState) => void
) {
    const newRows: {
        data: DataTableState['displayData']
        dataIndex: number
    }[] = []

    data.forEach((row, index) => {
        const displayRow = computeDisplayRow(
            columns,
            row.data,
            index,
            filterList,
            searchText,
            tableMeta ? tableMeta.tableData : props.data,
            options,
            props,
            data,
            state,
            setState
        )

        if (displayRow) {
            newRows.push({
                data: displayRow,
                dataIndex: row.index
            })
        }
    })

    return newRows
}
