import { type ReactNode } from 'react'
import getDisplayData from './get-display-data'
import { getCollatorComparator } from '../get-collator-comparator'
import type { DataTableState } from '@src/types/state'
import type { DataTableOptions } from '@src/types/options'
import type { DataTableProps } from '@src/data-table.props'

/**
 * ⚠️ This JSDoc is generated by AI ⚠️
 * -
 *
 * Updates a specific cell's data in the table and refreshes the state.
 *
 * This function modifies the data of a specified cell in the table, updates the filter data,
 * and re-calculates the display data for the table. It handles custom rendering logic for the cell
 * and ensures that the filter data is correctly updated and sorted if necessary.
 *
 * @param row - The index of the row to update.
 * @param index - The index of the column to update.
 * @param value - The new value to set in the specified cell.
 * @param prevState - The previous state of the data table.
 * @param options - Configuration options for the data table.
 * @param datatableProps - The properties of the data table.
 * @param setState - A function to update the state of the data table.
 * @returns The new state of the data table after the update.
 */
export default function updateDataCol<T>(
    row: number,
    index: number,
    value: ReactNode,
    prevState: DataTableState<T>,
    options: DataTableOptions<T>,
    datatableProps: DataTableProps<T>,
    setState: (newState: DataTableState<T>) => void
): DataTableState<T> {
    const filterData = prevState.filterData

    const columnState = prevState.columns[index]

    if (!columnState) {
        throw new Error(`Column ${index} does not exist`)
    }

    const funcResult = columnState.customBodyRender?.(
        value,
        row,
        index,
        prevState,
        setState
    )

    const filterValue =
        'value' in (funcResult?.props ?? {})
            ? funcResult?.props.value
            : prevState.data?.[row]?.data[index]

    const prevFilterIndex = filterData[index]?.indexOf(filterValue)
    filterData[index]?.splice(prevFilterIndex ?? 0, 1, filterValue)

    const changedData = prevState.data[row]

    if (!changedData?.data) {
        throw new Error(`Invalid cell value: ${value}`)
    }

    changedData.data[index] = value
    prevState.data[row] = changedData

    if (options.sortFilterList) {
        const comparator = getCollatorComparator()

        filterData[index]?.sort(comparator)
    }

    const newState: DataTableState<T> = {
        ...prevState,
        filterData: filterData
    }

    return {
        ...newState,
        displayData: getDisplayData(
            prevState.columns,
            prevState.data,
            prevState.filterList,
            prevState.searchText,
            undefined,
            datatableProps,
            newState,
            options,
            setState
        )
    }
}
