import type {
    DataTableOptions,
    DataTableSortOrderOption,
    DataTableState
} from '@src/index'
import { buildMap } from './_shared/build-map'
import { sortCompare } from './sort-compare'

/**
 * ⚠️ This JSDoc is generated by AI ⚠️
 * -
 *
 * Sorts the table data based on the given column index and direction.
 *
 * @param  data  The full table data.
 * @param  col  The column index to sort by.
 * @param  order  The direction of the sort. If not provided, the default sort direction is used.
 * @param  column  The column meta data. If not provided, the default sort compare function is used.
 * @param  options  The table options.
 * @param  state  The current state of the table.
 * @return  An object with the sorted table data and the updated selected rows.
 */
export default function sortTable(
    data: DataTableState['data'],
    col: number,
    order: DataTableSortOrderOption['direction'],
    column: DataTableState['columns'][0] | undefined,
    options: DataTableOptions,
    state: DataTableState
) {
    const isSortByCustomSortOption = options.customSort && !column?.sortCompare

    const meta = { selectedRows: state.selectedRows } // meta for customSort

    const dataSrc = isSortByCustomSortOption
        ? options.customSort?.(
              data,
              col,
              order ?? (column?.sortDescFirst ? 'desc' : 'asc'),
              meta
          )
        : data

    // reset the order by index
    let noSortData

    if (order === 'none') {
        noSortData = data.reduce((r, i) => {
            r[i.index] = i

            return r
        }, [])
    }

    const sortedData =
        dataSrc?.map((row, sIndex) => ({
            data: row.data[col],
            rowData: row.data,
            position: sIndex,
            rowSelected: state.selectedRows.lookup[row.index] ? true : false
        })) ?? []

    if (!isSortByCustomSortOption) {
        const sortCompareFn = column?.sortCompare ?? sortCompare
        sortedData.sort(sortCompareFn(order))
    }

    const tableData = []
    const selectedRows = []

    for (let i = 0; i < sortedData.length; i++) {
        const row = sortedData[i]
        tableData.push(dataSrc?.[row?.position])
        if (row?.rowSelected) {
            selectedRows.push({
                index: i,
                dataIndex: dataSrc?.[row.position].index
            })
        }
    }

    return {
        data: order === 'none' ? noSortData : tableData,
        selectedRows: {
            lookup: buildMap(selectedRows),
            data: selectedRows
        }
    }
}
